---

- debug:
          msg: "Processing addInterface request for : {{ currentServiceItem }}"

- set_fact:
    currentItem: "{{ currentServiceItem }}"

- name: Fetch Interface Information for Branch
  uri:
    url: "{{ versa_url }}/api/config/devices/device/{{ branchName }}/config/interfaces/vni/%22{{ currentServiceItem.portName }}%22?deep"
    method: GET
    user: "{{ versa_username }}"
    password: "{{ versa_password }}"
    #body: "{{ interfaceinfo }}"
    force_basic_auth: yes
    status_code: 200
    body_format: json
    validate_certs: no
    return_content: yes
    headers:
      Content-Type: "application/json"
      Accept: "application/json"
  register: fetchInterfaceResponse


- set_fact:
    fetchInterfaceInfo: "{{ fetchInterfaceResponse.content | from_json }}"

- set_fact:
    addInterfaceParamsList: { 'input': '{{ currentServiceItem }}', 'existingInterfaceInfo': '{{  fetchInterfaceInfo }}', 'addInterfaceItem': '{{ addInterfaceItem }}'}
- set_fact:
    addInterfaceInfoBody: "{{ addInterfaceParamsList | addSubInterface }}"

- name: Add Sub Interface
  uri:
    url: "{{ versa_url }}/api/config/devices/device/{{ branchName }}/config/interfaces/vni/%22{{ currentServiceItem.portName }}%22"
    method: PUT
    user: "{{ versa_username }}"
    password: "{{ versa_password }}"
    body: "{{ addInterfaceInfoBody }}"
    force_basic_auth: yes
    status_code: 204
    body_format: json
    validate_certs: no
    return_content: yes
    headers:
      Content-Type: "application/json"
      Accept: "application/json"
    register: response

#- debug:
#      msg: "SDKLOG-{{branchName}}: Add interface Successful with ipAddr: {{ currentServiceItem.ipAddress }} and vlanId: {{ currentServiceItem.vlanID }} for port {{  currentServiceItem.portName }} and interfaceID {{ currentServiceItem.subInterfaceId }} at {{ ansible_date_time.iso8601 }}"

- name: Fetch the Routing Instance to find out VR 
  block: 
    - uri:
        url: "{{ versa_url }}/api/config/devices/device/{{ branchName }}/config/routing-instances/routing-instance/{{ currentServiceItem.vpnName }}?deep"
        method: GET
        user: "{{ versa_username }}"
        password: "{{ versa_password }}"
        #body: "{{ interfaceinfo }}"
        force_basic_auth: yes
        status_code: 200
        body_format: json
        validate_certs: no
        return_content: yes
        headers:
          Content-Type: "application/json"
          Accept: "application/json"
      register: routingInstance
  rescue: 
    - fail:
        msg: "SDKLOG-{{branchName}}: VPN :: {{  currentServiceItem.vpnName }} doesn't exists in Versa at {{ ansible_date_time.iso8601 }}"

- set_fact:
    fetchedRoutingInstance: "{{ routingInstance.content | from_json }}"


- debug:
          msg: "Routing Instance : {{ fetchedRoutingInstance }}"

- set_fact:
    fullSubInterfaceName: "{{ currentServiceItem.portName }}.{{ currentServiceItem.subInterfaceId }}"

- set_fact:
    networkExists: false

- set_fact:
    networkExists: true
    associatedNetwork: "{{ fetchedRoutingInstance['routing-instance']['networks'][0] }}"
  when: ' "networks" in fetchedRoutingInstance["routing-instance"] '



- debug:
          msg: "NETWORK EXISTS : {{ networkExists }}"


##IF NETWORK EXISTS ASSOCIATE SUB INTERFACE TO NETWORK
- name: Update the Network Interfaces Array 
  block: 
    - uri:
        url: "{{ versa_url }}/api/config/devices/device/{{ branchName }}/config/networks/network/{{ associatedNetwork }}"
        method: GET
        user: "{{ versa_username }}"
        password: "{{ versa_password }}"
        #body: "{{ interfaceinfo }}"
        force_basic_auth: yes
        status_code: 200
        body_format: json
        validate_certs: no
        return_content: yes
        headers:
          Content-Type: "application/json"
          Accept: "application/json"
      register: networksInfo
 
    - set_fact:
        fetchedNetworksInfo: "{{ networksInfo.content | from_json }}"

    - debug:
          msg: "Networks Info : {{ fetchedNetworksInfo }}"

    - set_fact:
        networksList: "{{ fetchedNetworksInfo.network.interfaces | default ([]) }}"

    - set_fact:
        updatedNetworksList: "{{ networksList }} +  [ {{ fullSubInterfaceName | to_json }}  ]"

    - debug:
        msg: "New Networks : {{ updatedNetworksList }}"


    - set_fact:
        associateNetworkInput: { 'origNetworkInfoMsg': '{{ fetchedNetworksInfo }}', 'modifiedNetworkList': '{{ updatedNetworksList }}'  }

    - set_fact:
        associateNetworkBody: "{{ associateNetworkInput | associateNetworkToSubInterface }}"

    - uri:
        url: "{{ versa_url }}/api/config/devices/device/{{ branchName }}/config/networks/network/{{ associatedNetwork }}"
        method: PUT
        user: "{{ versa_username }}"
        password: "{{ versa_password }}"
        body: "{{ associateNetworkBody }}"
        force_basic_auth: yes
        status_code: 204
        body_format: json
        validate_certs: no
        return_content: yes
        headers:
          Content-Type: "application/json"
          Accept: "application/json"
        register: response

    - debug:
        msg: "SDKLOG-{{branchName}}: Add interface Successful with ipAddr: {{ currentServiceItem.ipAddress }} and vlanId: {{ currentServiceItem.vlanID }} for {{ fullSubInterfaceName }}, found existing Network {{ associatedNetwork }} associated to VPN: {{ currentServiceItem.vpnName }} at {{ ansible_date_time.iso8601 }}"
  when: networkExists == true



##IF NETWORK DOESN'T EXISTS CREATE A NEW NETWORK AND ASSOCIATE THAT NETWORK TO VR
- name: Update the Network Interfaces Array 
  block: 
    - set_fact:
        newNetwork: "{{ currentServiceItem.vpnName }}_LANNETWORK"

    - uri:
        url: "{{ versa_url }}/api/config/devices/device/{{ branchName }}/config/networks"
        method: POST
        user: "{{ versa_username }}"
        password: "{{ versa_password }}"
        body: "{{ createNetworkBody }}"
        force_basic_auth: yes
        status_code: 201
        body_format: json
        validate_certs: no
        return_content: yes
        headers:
          Content-Type: "application/json"
          Accept: "application/json"
      register: createNetwork

    - set_fact:
        vrfNetworks: "{{ fetchedRoutingInstance['routing-instance'].networks | default ([]) }}"

    - set_fact:
        vrfNetworks: "{{ vrfNetworks }} +  [ {{ newNetwork | to_json }}  ]"


    - debug:
          msg: "New VRF NETWORKS : {{ vrfNetworks }}"

    - set_fact:
        associateVpnInput: { 'origRoutingInstancesMsg': '{{ fetchedRoutingInstance }}', 'modifiedVrfNetworks': '{{ vrfNetworks }}' }

    - set_fact:
        associateVpnBody: "{{ associateVpnInput | associateVpnToSubInterface }}"

    - uri:
        url: "{{ versa_url }}/api/config/devices/device/{{ branchName }}/config/routing-instances/routing-instance/{{ currentServiceItem.vpnName }}"
        method: PUT
        user: "{{ versa_username }}"
        password: "{{ versa_password }}"
        body: "{{ associateVpnBody }}"
        force_basic_auth: yes
        status_code: 204
        body_format: json
        validate_certs: no
        return_content: yes
        headers:
          Content-Type: "application/json"
          Accept: "application/json"
        register: response
     
    - debug:
        msg: "SDKLOG-{{branchName}}: Add interface Successful with ipAddr: {{ currentServiceItem.ipAddress }} and vlanId: {{ currentServiceItem.vlanID }} for{{ fullSubInterfaceName }}, created new network {{ newNetwork }} association to VPN: {{ currentServiceItem.vpnName }} at {{ ansible_date_time.iso8601 }}"
  when: networkExists == false

- set_fact:
    tmpExecutionList: "{{ executionList | default([])}}"

- set_fact:
    executionListInput: { 'origList': '{{ tmpExecutionList }}', 'interfaceInfo': '{{  fetchInterfaceInfo }}', 'currentItem': '{{ currentServiceItem }}' }

- set_fact:
    executionList: "{{ executionListInput | storeExecutionList }}"
